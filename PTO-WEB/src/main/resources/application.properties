#AWS deployment properties
server.port=443
#server.port=8080
spring.profiles.active=AWSdemo
#spring.profiles.active=AWSstage
#spring.profiles.active=local
server.ssl.enabled=true

spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.web-allow-others=true

#server.ssl.key-store-type=PKCS12
#server.ssl.key-store=classpath:efile_server_certificate.p12
#server.ssl.key-store-password=jordanat23
#server.ssl.key-alias=server

server.ssl.key-store-type=PKCS12
server.ssl.key-store=classpath:keystore.p12
server.ssl.key-store-password=jordanat23
server.ssl.key-alias=efile-server

server.use-forward-headers=true
#server.tomcat.internal-proxies=10.0.70.111
#server.tomcat.remote-ip-header=x-forwarded-for
#server.tomcat.protocol-header=x-forwarded-proto

#upload properties
spring.servlet.multipart.max-file-size=22284KB
spring.servlet.multipart.max-request-size=22284KB

server.error.whitelabel.enabled=false

#// Initialize the Amazon Cognito credentials provider
#  CognitoCachingCredentialsProvider credentialsProvider = new CognitoCachingCredentialsProvider(
#  getApplicationContext(),
#   "us-east-2:5041562d-e248-488d-bb0f-7e800360e139", // Identity pool ID
#    Regions.US_EAST_2 // Region
#   );

# java code example: getting credentials provider
# this object is what we will need to add as a provider for over over written Identity Manager
# in our spring app context
# import com.amazonaws.auth.CognitoCachingCredentialsProvider;
# import com.amazonaws.regions.Regions;
#// initialize a credentials provider object with your Activity’s context and
#// the values from your identity pool
#   CognitoCachingCredentialsProvider credentialsProvider = new CognitoCachingCredentialsProvider(
#   getContext(), // get the context for the current activity
#   "1234567890", // your AWS Account id
#   "us-east-1:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX", // your identity pool id
#   "arn:aws:iam::XXXXXXXXXX:role/YourRoleName",// an authenticated role ARN
#   "arn:aws:iam::XXXXXXXXXX:role/YourRoleName", // an unauthenticated role ARN
#   Regions.US_EAST_1 //Region
#   );


# internationalization
################################################################################################
# set path for messages properties for the view layer
################################################################################################
spring.messages.basename=messages/messages

################################################################################################
# profile parameter allows spring to pick which set of beans to use for dependency injection
################################################################################################
#spring.profiles.active=JPA
#spring.profiles.active=map


# ==============================================================
# = Data Source
# ==============================================================
#spring.datasource.url = jdbc:mysql://localhost:3306/login?useSSL=true
#spring.datasource.username = root
#spring.datasource.password = admin

# ==============================================================
# = Keep the connection alive if idle for a long time (needed in production)
# ==============================================================
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ==============================================================
# = Show or not log for each sql query
# ==============================================================
spring.jpa.show-sql = true

# ==============================================================
# = Hibernate ddl auto (create, create-drop, update)
# ==============================================================
spring.jpa.hibernate.ddl-auto = update

# ==============================================================
# = The SQL dialect makes Hibernate generate better SQL for the chosen database
# ==============================================================
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder
# ==============================================================
spring.queries.users-query=select email, password, active from user_credentials where email =?
spring.queries.roles-query=select u.email, r.role_name from user_credentials u inner join credentials_role ur on(u.user_credentials_id=ur.user_credentials_id) inner join user_roles r on(ur.user_role_id=r.user_role_id) where u.email=?

# ==============================================================
# = Initialize the database using data.sql script
# ==============================================================
spring.datasource.initialization-mode=always



# application workflow time interval properties


